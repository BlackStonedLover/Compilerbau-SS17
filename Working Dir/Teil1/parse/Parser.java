
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 07 09:00:39 GMT 2017
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import absyn.*;
import sym.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 07 09:00:39 GMT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\004\000\002\003\007\000\002\011\003" +
    "\000\002\011\010\000\002\004\013\000\002\007\002\000" +
    "\002\007\004\000\002\010\007\000\002\005\002\000\002" +
    "\005\003\000\002\006\005\000\002\006\003\000\002\014" +
    "\005\000\002\014\006\000\002\012\002\000\002\012\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\003\000\002\013\003\000\002" +
    "\015\010\000\002\022\002\000\002\022\004\000\002\016" +
    "\007\000\002\017\005\000\002\021\005\000\002\020\006" +
    "\000\002\023\003\000\002\023\003\000\002\025\003\000" +
    "\002\024\006\000\002\024\006\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\032\002\000\002\032\003" +
    "\000\002\032\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\030\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\000\012\006\014\010\001\002\000" +
    "\004\002\173\001\002\000\010\002\000\012\006\014\010" +
    "\001\002\000\004\042\025\001\002\000\010\002\000\012" +
    "\006\014\010\001\002\000\004\042\011\001\002\000\004" +
    "\023\012\001\002\000\006\004\015\042\014\001\002\000" +
    "\004\035\023\001\002\000\010\027\ufffc\035\ufffc\040\ufffc" +
    "\001\002\000\004\034\016\001\002\000\004\041\017\001" +
    "\002\000\004\033\020\001\002\000\004\013\021\001\002" +
    "\000\006\004\015\042\014\001\002\000\010\027\ufffb\035" +
    "\ufffb\040\ufffb\001\002\000\010\002\ufffd\012\ufffd\014\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\004\030\026\001" +
    "\002\000\010\011\030\027\ufff6\042\032\001\002\000\004" +
    "\027\ufff5\001\002\000\004\042\167\001\002\000\004\027" +
    "\040\001\002\000\004\036\036\001\002\000\006\027\ufff3" +
    "\040\034\001\002\000\006\011\030\042\032\001\002\000" +
    "\004\027\ufff4\001\002\000\006\004\015\042\014\001\002" +
    "\000\006\027\ufff2\040\ufff2\001\002\000\004\032\041\001" +
    "\002\000\020\005\ufff9\007\042\010\ufff9\031\ufff9\032\ufff9" +
    "\035\ufff9\042\ufff9\001\002\000\004\042\163\001\002\000" +
    "\020\005\ufff9\007\042\010\ufff9\031\ufff9\032\ufff9\035\ufff9" +
    "\042\ufff9\001\002\000\016\005\057\010\047\031\ufff0\032" +
    "\060\035\051\042\050\001\002\000\004\037\160\001\002" +
    "\000\042\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\033\uffe1" +
    "\034\155\035\uffe1\037\uffe1\040\uffe1\001\002\000\004\030" +
    "\151\001\002\000\010\030\143\034\uffdf\037\uffdf\001\002" +
    "\000\020\005\uffe9\006\uffe9\010\uffe9\031\uffe9\032\uffe9\035" +
    "\uffe9\042\uffe9\001\002\000\020\005\uffee\006\uffee\010\uffee" +
    "\031\uffee\032\uffee\035\uffee\042\uffee\001\002\000\004\035" +
    "\142\001\002\000\004\031\141\001\002\000\042\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\033\uffe0\034\136\035\uffe0" +
    "\037\uffe0\040\uffe0\001\002\000\004\035\135\001\002\000" +
    "\004\030\067\001\002\000\016\005\057\010\047\031\ufff0" +
    "\032\060\035\051\042\050\001\002\000\016\005\057\010" +
    "\047\031\ufff0\032\060\035\051\042\050\001\002\000\020" +
    "\005\uffea\006\uffea\010\uffea\031\uffea\032\uffea\035\uffea\042" +
    "\uffea\001\002\000\020\005\uffed\006\uffed\010\uffed\031\uffed" +
    "\032\uffed\035\uffed\042\uffed\001\002\000\004\031\uffef\001" +
    "\002\000\004\031\066\001\002\000\020\005\uffe3\006\uffe3" +
    "\010\uffe3\031\uffe3\032\uffe3\035\uffe3\042\uffe3\001\002\000" +
    "\012\020\070\030\100\041\074\042\072\001\002\000\012" +
    "\020\070\030\100\041\074\042\072\001\002\000\036\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\033\uffcc\035\uffcc\040" +
    "\uffcc\001\002\000\040\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\001\002\000\036" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\033\uffce\035\uffce" +
    "\040\uffce\001\002\000\036\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\033\uffcb\035\uffcb\040\uffcb\001\002\000\004\027" +
    "\127\001\002\000\036\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\106\022\107\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\033\uffd1\035\uffd1\040\uffd1\001\002\000\022\015\116" +
    "\016\117\017\103\020\104\023\113\024\120\025\114\026" +
    "\115\001\002\000\012\020\070\030\100\041\074\042\072" +
    "\001\002\000\010\017\103\020\104\027\102\001\002\000" +
    "\036\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\033\uffcd\035" +
    "\uffcd\040\uffcd\001\002\000\012\020\070\030\100\041\074" +
    "\042\072\001\002\000\012\020\070\030\100\041\074\042" +
    "\072\001\002\000\036\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\106\022\107\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\033\uffd3\035\uffd3\040\uffd3\001\002\000\012\020\070" +
    "\030\100\041\074\042\072\001\002\000\012\020\070\030" +
    "\100\041\074\042\072\001\002\000\036\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\033\uffcf\035\uffcf\040\uffcf\001\002" +
    "\000\036\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0" +
    "\035\uffd0\040\uffd0\001\002\000\036\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\106\022\107\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\033\uffd2\035\uffd2\040\uffd2\001\002\000" +
    "\012\020\070\030\100\041\074\042\072\001\002\000\012" +
    "\020\070\030\100\041\074\042\072\001\002\000\012\020" +
    "\070\030\100\041\074\042\072\001\002\000\012\020\070" +
    "\030\100\041\074\042\072\001\002\000\012\020\070\030" +
    "\100\041\074\042\072\001\002\000\012\020\070\030\100" +
    "\041\074\042\072\001\002\000\010\017\103\020\104\027" +
    "\uffd8\001\002\000\010\017\103\020\104\027\uffda\001\002" +
    "\000\010\017\103\020\104\027\uffdb\001\002\000\010\017" +
    "\103\020\104\027\uffd9\001\002\000\010\017\103\020\104" +
    "\027\uffdc\001\002\000\010\017\103\020\104\027\uffd7\001" +
    "\002\000\014\005\057\010\047\032\060\035\051\042\050" +
    "\001\002\000\020\005\uffe7\006\132\010\uffe7\031\uffe7\032" +
    "\uffe7\035\uffe7\042\uffe7\001\002\000\020\005\uffe8\006\uffe8" +
    "\010\uffe8\031\uffe8\032\uffe8\035\uffe8\042\uffe8\001\002\000" +
    "\014\005\057\010\047\032\060\035\051\042\050\001\002" +
    "\000\020\005\uffe6\006\uffe6\010\uffe6\031\uffe6\032\uffe6\035" +
    "\uffe6\042\uffe6\001\002\000\036\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\033\uffca\035\uffca\040\uffca\001\002\000\020" +
    "\005\uffec\006\uffec\010\uffec\031\uffec\032\uffec\035\uffec\042" +
    "\uffec\001\002\000\012\020\070\030\100\041\074\042\072" +
    "\001\002\000\010\017\103\020\104\033\140\001\002\000" +
    "\042\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\033\uffde\034" +
    "\uffde\035\uffde\037\uffde\040\uffde\001\002\000\010\002\ufffa" +
    "\012\ufffa\014\ufffa\001\002\000\020\005\uffeb\006\uffeb\010" +
    "\uffeb\031\uffeb\032\uffeb\035\uffeb\042\uffeb\001\002\000\014" +
    "\020\070\027\uffd6\030\100\041\074\042\072\001\002\000" +
    "\004\027\150\001\002\000\012\017\103\020\104\027\uffd5" +
    "\040\146\001\002\000\014\020\070\027\uffd6\030\100\041" +
    "\074\042\072\001\002\000\004\027\uffd4\001\002\000\004" +
    "\035\uffe2\001\002\000\012\020\070\030\100\041\074\042" +
    "\072\001\002\000\004\027\153\001\002\000\014\005\057" +
    "\010\047\032\060\035\051\042\050\001\002\000\020\005" +
    "\uffe5\006\uffe5\010\uffe5\031\uffe5\032\uffe5\035\uffe5\042\uffe5" +
    "\001\002\000\012\020\070\030\100\041\074\042\072\001" +
    "\002\000\010\017\103\020\104\033\157\001\002\000\042" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\037\uffdd\040\uffdd\001\002\000\012\020\070\030" +
    "\100\041\074\042\072\001\002\000\010\017\103\020\104" +
    "\035\uffe4\001\002\000\016\005\ufff8\010\ufff8\031\ufff8\032" +
    "\ufff8\035\ufff8\042\ufff8\001\002\000\004\036\164\001\002" +
    "\000\006\004\015\042\014\001\002\000\004\035\166\001" +
    "\002\000\020\005\ufff7\007\ufff7\010\ufff7\031\ufff7\032\ufff7" +
    "\035\ufff7\042\ufff7\001\002\000\004\036\170\001\002\000" +
    "\006\004\015\042\014\001\002\000\006\027\ufff1\040\ufff1" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\010\002\171\003\006\004\004\001\001" +
    "\000\002\001\001\000\010\002\023\003\006\004\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\030" +
    "\006\026\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\034\014\032\001\001\000\002\001\001\000" +
    "\004\011\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\043\010\042\001\001\000\002\001\001\000" +
    "\006\007\161\010\042\001\001\000\026\012\053\013\060" +
    "\015\051\016\062\017\055\020\052\021\061\023\044\024" +
    "\054\025\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\064\013\060\015\051\016\062\017\055\020\052\021\061" +
    "\023\044\024\054\025\045\001\001\000\026\012\063\013" +
    "\060\015\051\016\062\017\055\020\052\021\061\023\044" +
    "\024\054\025\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\070\024\054\025\045\026\076\027\075\030" +
    "\072\031\074\001\001\000\012\023\070\024\054\025\045" +
    "\030\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\070\024\054\025" +
    "\045\026\100\027\075\030\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\070\024\054\025\045\027" +
    "\111\030\072\001\001\000\014\023\070\024\054\025\045" +
    "\027\104\030\072\001\001\000\002\001\001\000\012\023" +
    "\070\024\054\025\045\030\110\001\001\000\012\023\070" +
    "\024\054\025\045\030\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\070\024\054" +
    "\025\045\026\125\027\075\030\072\001\001\000\016\023" +
    "\070\024\054\025\045\026\124\027\075\030\072\001\001" +
    "\000\016\023\070\024\054\025\045\026\123\027\075\030" +
    "\072\001\001\000\016\023\070\024\054\025\045\026\122" +
    "\027\075\030\072\001\001\000\016\023\070\024\054\025" +
    "\045\026\121\027\075\030\072\001\001\000\016\023\070" +
    "\024\054\025\045\026\120\027\075\030\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\013" +
    "\127\015\051\016\062\017\055\020\052\021\061\023\044" +
    "\024\054\025\045\001\001\000\004\022\130\001\001\000" +
    "\002\001\001\000\024\013\132\015\051\016\062\017\055" +
    "\020\052\021\061\023\044\024\054\025\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\070\024\054\025\045\026\136\027\075\030\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\023\070\024\054\025\045\026" +
    "\144\027\075\030\072\032\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\023\070\024\054\025\045\026" +
    "\144\027\075\030\072\032\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\023\070\024\054\025\045\026" +
    "\076\027\075\030\072\031\151\001\001\000\002\001\001" +
    "\000\024\013\153\015\051\016\062\017\055\020\052\021" +
    "\061\023\044\024\054\025\045\001\001\000\002\001\001" +
    "\000\016\023\070\024\054\025\045\026\155\027\075\030" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\070\024\054\025\045\026\160\027\075\030\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpressionsTwo ::= MINUS ExpressionsTwo 
            {
              Exp RESULT =null;
		int expIntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expIntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expInt = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new OpExp(expIntleft,expIntright,OpExp.SUB, new IntExp(expIntleft,expIntright,0),  expInt) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpressionsTwo ::= INTLIT 
            {
              Exp RESULT =null;
		int expIntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expIntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expInt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IntExp(expIntleft,expIntright, expInt) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionsTwo ::= Variable 
            {
              Exp RESULT =null;
		int expVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var expVar = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new VarExp(expVarleft,expVarright,expVar) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressionsTwo ::= LPAREN Expressions RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpressionsOne ::= ExpressionsTwo 
            {
              Exp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp et = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = et ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsOne",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionsOne ::= ExpressionsOne SLASH ExpressionsTwo 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,9,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsOne",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionsOne ::= ExpressionsOne STAR ExpressionsTwo 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,8,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsOne",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expressions ::= ExpressionsOne 
            {
              Exp RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp eo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = eo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expressions ::= Expressions PLUS ExpressionsOne 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,6,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expressions ::= Expressions MINUS ExpressionsOne 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,7,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpressionsList ::= Expressions COMMA ExpressionsList 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList e2 = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpList(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpressionsList ::= Expressions 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpList(e1,new ExpList());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpressionsList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Condition ::= Expressions EQ Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,0,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condition ::= Expressions NE Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,1,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condition ::= Expressions GT Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,4,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Condition ::= Expressions GE Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,5,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Condition ::= Expressions LE Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,3,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condition ::= Expressions LT Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOneleft,expOneright,2,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VariableArray ::= SimpleV LBRACK Expressions RBRACK 
            {
              Var RESULT =null;
		int arrIdentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrIdentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var arrIdent = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp arrID = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(arrIdentleft,arrIdentright, arrIdent, arrID) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableArray",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VariableArray ::= VariableArray LBRACK Expressions RBRACK 
            {
              Var RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var va = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(valeft,varight,va,exp) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableArray",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SimpleV ::= IDENT 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVar(ileft,iright,Sym.newSym(i)) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleV",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Variable ::= VariableArray 
            {
              Var RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var va = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = va ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Variable ::= SimpleV 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var id = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ProcCall ::= IDENT LPAREN ExpressionsList RPAREN 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList n = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStm(ileft,iright,Sym.newSym(i),n) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CompoundStmt ::= LCURL StmtList RCURL 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList s = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CompStm(ileft,iright,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AssignStmt ::= Variable ASGN Expressions 
            {
              Stm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStm(oleft,oright,l,r) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileStmt ::= WHILE LPAREN Condition RPAREN Stmt 
            {
              Stm RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm b = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStm (wleft,wright,t,b) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OptElse ::= ELSE Stmt 
            {
              Stm RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OptElse ::= 
            {
              Stm RESULT =null;
		RESULT= new EmptyStm(0,0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfStmt ::= IF LPAREN Condition RPAREN Stmt OptElse 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm s2 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStm (ileft,iright,t,s1,s2 );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= SEMIC 
            {
              Stm RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EmptyStm (sleft,sright) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= CompoundStmt 
            {
              Stm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm c = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= ProcCall SEMIC 
            {
              Stm RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm pc = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= AssignStmt SEMIC 
            {
              Stm RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm a = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= WhileStmt 
            {
              Stm RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm w = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= IfStmt 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm i = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StmtList ::= Stmt StmtList 
            {
              StmList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm h = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmList t = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StmtList ::= 
            {
              StmList RESULT =null;
		 RESULT = new StmList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Para ::= REF IDENT COLON Typ 
            {
              Dec RESULT =null;
		int idtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String idt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty tipe = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(idtleft,idtright,Sym.newSym(idt),tipe,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Para",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Para ::= IDENT COLON Typ 
            {
              Dec RESULT =null;
		int idtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String idt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty tipe = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(idtleft,idtright,Sym.newSym(idt),tipe,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Para",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Paralist2 ::= Para 
            {
              DecList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,new DecList()) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Paralist2 ::= Para COMMA Paralist2 
            {
              DecList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList t = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Paralist ::= Paralist2 
            {
              DecList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList pl = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Paralist ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariablenDec ::= VAR IDENT COLON Typ SEMIC 
            {
              Dec RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDec(nleft,nright,Sym.newSym(n),t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariablenDec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Deklaration ::= VariablenDec Deklaration 
            {
              DecList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList t = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Deklaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Deklaration ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Deklaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Prozedur ::= PROC IDENT LPAREN Paralist RPAREN LCURL Deklaration StmtList RCURL 
            {
              Dec RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DecList p = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList b = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcDec(prleft, prright, Sym.newSym(s),p,d,b) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prozedur",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Typ ::= ARRAY LBRACK INTLIT RBRACK OF Typ 
            {
              Ty RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer count = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(arleft, arright, count,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Typ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Typ ::= IDENT 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameTy(idleft,idright,Sym.newSym(id)) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Typ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypV ::= TYPE IDENT EQ Typ SEMIC 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty tt = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDec(tleft,tright,Sym.newSym(sn),tt) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypV",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Prozedur Program 
            {
              DecList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList t = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= TypV Program 
            {
              DecList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList t = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

