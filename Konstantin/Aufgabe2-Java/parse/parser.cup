/*
 * parser.cup -- SPL parser specification
 */


package parse;

import java_cup.runtime.*;


parser code {:

  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }

:}


terminal ARRAY,IF,ELSE,VAR,WHILE,REF,PROC,OF,TYPE,LE,GE,ASGN,PLUS,MINUS,STAR,SLASH,EQ,NE,LT,GT,RPAREN,LPAREN,RCURL,LCURL,RBRACK,LBRACK,SEMIC,COMMA,COLON;
terminal Integer INTLIT;
terminal String IDENT;


non terminal		MatchSign,Operator,Program,TypV,Prozedur,Typ,Array,Paralist,Deklaration,StmtList,Stmt,Para,LeftHandSide,RightHandSide,Expressions,Ausdruck, IfStmt,WhileStmt,AssignStmt,ProcCall,OptElse,Variable,VariableArray,Expressions;

start with Program;


Program::=|
      TypV:t Program:h
	  {: RESULT = new DecList((dec)h, (DecList)t) ;:}
      |
      Prozedur:t Program:h
	  {: RESULT = new DecList((Dec)h, (DecList)t) ;:}
      ;

/*
eventueller Auruf von .newSym() nötig anstatt Sym sn
*/
TypV::=TYPE:t IDENT:sn EQ Typ:tt SEMIC
{: RESULT = new TypeDec(tleft,tright,(Sym) sn, (Ty)tt ;:}
;

Typ::=
IDENT:id
{: RESULT = id ;:}
|
Array: a
{: RESULT = a ;:}
;


Array::=

ARRAY:a LBRACK INTLIT:count RBRACK OF Array:t
{: RESULT = new ArrayTy(aleft, aright, count, (Ty t)t) ;:}
|
ARRAY:a LBRACK INTLIT:count RBRACK OF IDENT:t
{: RESULT = new ArrayTy(aleft, aright, count, (Ty)t) ;:}
;

Prozedur::=
PROC:p IDENT:s LPAREN Paralist RPAREN LCURL Deklaration:p StmtList:b RCURL
{: RESULT = new ProcDec(pleft, pright, (Sym)s, (DecList)p, (StmList)b) ;:};

/*

*/
Deklaration ::=
{: RESULT =  ;:}
|
VAR IDENT COLON IDENT SEMIC Deklaration
{: RESULT ;:};

Paralist::=
{: RESULT ;:}
|
Para COMMA Paralist
{: RESULT ;:}
|
Para
{: RESULT ;:};

Para::= IDENT COLON Typ
{: RESULT ;:}
|
REF IDENT COLON Typ
{: RESULT ;:};


/*
TODO: Stmtlist evtl mit boolean? da überprüfung auf empty
*/
StmtList::=
{: RESULT = new StmList() ;:}
|
Stmt:h StmtList:t
{: RESULT = new StmList((Stm h)h, (StmList t)t) ;:};


Stmt::=
IfStmt:i
{: RESULT = i; :}
|
WhileStmt: w
{: RESULT = w; :}
|
AssignStmt: a
{: RESULT = a; :}
|
ProcCall: pc
{: RESULT = pc; :}
|
/*
TODO: EMPTY STATEMENT
*/
SEMIC:s
{: RESULT = (sleft,sright) ; :}
;

IfStmt::=IF LPAREN Expressions RPAREN Stmt OptElse
{: RESULT = ;:};

OptElse::=
{: RESULT ;:}
|
ELSE Stmt
{: RESULT ;:}
;


WhileStmt::=
WHILE LPAREN Expressions RPAREN Stmt
{: RESULT = ;};


AssignStmt::=
  LeftHandSide:l ASGN RightHandSide:r
  {: RESULT = new AssignStmt(lleft,rright, (Var)v, (Exp)e) ;:}
  ;

ProcCall::=
IDENT LPAREN IDENT RPAREN SEMIC
{: RESULT ;:}
;

LeftHandSide::=
{: RESULT = new EmptyStm(left,right);:}
|
Variable
{: RESULT ;:};

Variable::=IDENT
{: RESULT ;:}
|
VariableArray
{: RESULT ;:}
;

VariableArray::= VariableArray LBRACK Expressions RBRACK
{: RESULT = );:}
|
IDENT:arrIdent LBRACK Expressions:arrID RBRACK
{: RESULT = new ArrayVar(arrIdentLeftSide,arrIdentRightSide, arrIdent, arrID) ;:}
;

RightHandSide::=Expressions
{: RESULT ;:}
;


Expressions::=
Expressions:expOne LT:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne LE:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne GE:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne GT:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne NE:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne EQ:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne MINUS:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne PLUS:OP Expressions:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
ExpressionsOne
;

ExpressionsOne::=
Expressions:expOne STAR:OP ExpressionTwo:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
Expressions:expOne SLASH:OP ExpressionTwo:expTwo
{:RESULT = new OpExp(expOneLeftSide,expOneRightSide,OP,expOne,expTwo);:}
|
ExpressionTwo
;

ExpressionTwo::=
MINUS INTLIT|
INTLIT:expInt
{: RESULT= new IntExp(expIntleft,expIntright, expIntvalue) ;:}
|
Variable:ExpVar
{: RESULT= new VarExp(ExpVarleft,ExpVarright, (Var))expVar) ;:}
|
VariableArray|
LPAREN Expressions RPAREN
;







Operator::=
LT
LE
GE
GT
EQ
EQ
PLUS|
MINUS|
STAR|
SLASH;
