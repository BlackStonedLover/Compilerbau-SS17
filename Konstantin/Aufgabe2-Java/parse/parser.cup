/*
 * parser.cup -- SPL parser specification
 */


package parse;

import java_cup.runtime.*;
import abysn.*;
import sym.*;

parser code {:

  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }

:}


terminal ARRAY,IF,ELSE,VAR,WHILE,REF,PROC,OF,TYPE,LE,GE,PLUS,MINUS,STAR,SLASH,EQ,NE,LT,GT,RPAREN,LPAREN,RCURL,LCURL,RBRACK,LBRACK,SEMIC,COLON;
terminal Integer INTLIT;
terminal String IDENT;

non terminal    DecList Program;
non terminal    DecList TypV;
non terminal    DecList Prozedur;
non terminal    ExpList Paralist;
non terminal    ExpList Paralist2;
non terminal    DecList Deklaration;
non terminal    Ty Typ;
non terminal    ArrayTy Array;
non terminal    StmList StmtList;
non terminal    Stm Stmt;
non terminal    Dec Para;
non terminal    IfStmt;
non terminal    WhileStmt;
non terminal    AssignStmt;
non terminal    ProcCall;
non terminal    CompoundStmt;
non terminal    Stm OptElse;
non terminal    Variable;
non terminal    Var VariableArray;
non terminal    Exp Expressions;
non terminal    Exp ExpressionsOne;
non terminal    Exp ExpressionsTwo;
non terminal    Exp Condition;

start with Program;

Program::=|
      TypV:t Program:h
	  {: RESULT = new DecList(h,t) ;:}
      |
      Prozedur:t Program:h
	  {: RESULT = new DecList(h,t) ;:}
      ;


TypV::=TYPE:t IDENT:sn EQ Typ:tt SEMIC
{: RESULT = new TypeDec(t.left,t.right,Sym.newSym(sn),tt ;:}
;

Typ::=
IDENT:id
{: RESULT = new NameTy(id.left,id.right,Sym.newSym(id)) ;:}
|
Array: a
{: RESULT = a ;:}
;


Array::=

ARRAY:a LBRACK INTLIT:count RBRACK OF Array:t
{: RESULT = new ArrayTy(a.left, a.right, count,t) ;:}
|
ARRAY:a LBRACK INTLIT:count RBRACK OF IDENT:t
{: RESULT = new ArrayTy(a.left, a.right, count,t) ;:}
;

Prozedur::=
PROC:p IDENT:s LPAREN Paralist RPAREN LCURL Deklaration:p StmtList:b RCURL
{: RESULT = new ProcDec(p.left, p.right, Sym.newSym(s),p,b) ;:};

Deklaration ::=
{: RESULT = new DecList() ;:}
|
VAR IDENT:n COLON Typ:t SEMIC Deklaration:d
{: RESULT = new DecList(new VarDec(n.left,n.right,Sym.newSym(n),t),d) ;:};

Paralist::=
{: RESULT = new DecList() ; :}
|
Paralist2:pl
{: RESULT = pl;}
;

Paralist2::=
Para:h COMMA Paralist2:t
{: RESULT = new Declist(h,t) ;:}
|
Para:h
{: RESULT = new Declist(h,new Declist()) ;:};


Para::=
IDENT:idt COLON Typ:tipe
{: RESULT = new ParDec(idt.left,idt.right,idt,tipe,false);:}
|
REF IDENT:idt COLON Typ:tipe
{: RESULT = new ParDec(idt.left,idt.right,idt,tipe,true);:}
;


StmtList::=
{: RESULT = new StmList() ;:}
|
Stmt:h StmtList:t
{: RESULT = new StmList(h,t) ;:};


Stmt::=
IfStmt:i
{: RESULT = i; :}
|
WhileStmt:w
{: RESULT = w; :}
|
<<<<<<< HEAD
AssignStmt:a SEMIC
=======
AssignStmt:a
>>>>>>> 4145ad9101bd242962fb27d2fcc16af2fef3627a
{: RESULT = a; :}
|
ProcCall:pc SEMIC
{: RESULT = pc; :}
|
CompoundStmt:c
{:RESULT = c:}
|
SEMIC:s
{: RESULT = new EmptyStm (s.left,s.right) ; :}
;

IfStmt::=IF:i LPAREN Condition:t RPAREN Stmt:s1 OptElse:s2
{: RESULT = new IfStmt (i.left,i.right,t,s1,s2 ;:};


OptElse::=
{: RESULT = new EmptyStm(left,right) ;:}
|
ELSE:t Stmt:s1
{: RESULT = s1;:}
;


WhileStmt::=
WHILE:w LPAREN Condition:t RPAREN Stmt:b
{: RESULT = new WhileStmt (w.left,w.right,t,b ;};

AssignStmt::=
  Variable:l ASGN Expressions:r
  {: RESULT = new AssignStmt(l.left,r.right,l,r) ;:}
  ;

CompoundStmt::=
LCURL:i StmtList:s RCURL
{:RESULT = new CompStm(i.left,i.right,s):}
;

ProcCall::=
IDENT:i LPAREN ExpressionsList:n RPAREN
{: RESULT = new CallStm(i.left,i.right,Sym.newSym(i),n ;:}
;


Variable::=
IDENT:id
{: RESULT = new SimpleVar(id.left,id.right,Sym.newSym(id) ;:}
|
VariableArray:va
{: RESULT = va ;:}
;

VariableArray::= VariableArray:va LBRACK Expressions:exp RBRACK
{: RESULT = new ArrayVar(va.left,va.right,va,exp) ;:}
|
IDENT:arrIdent LBRACK Expressions:arrID RBRACK
{: RESULT = new ArrayVar(arrIdent.left,arrIdent.right, arrIdent, arrID) ;:}
;


Condition::=
Expressions:expOne LT:OP Expressions:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
Expressions:expOne LE:OP Expressions:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
Expressions:expOne GE:OP Expressions:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
Expressions:expOne GT:OP Expressions:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
Expressions:expOne NE:OP Expressions:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
Expressions:expOne EQ:OP Expressions:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
;

ExpressionsList::=
{: RESULT = new EmptyStm(left,right) ;:}
|
Expressions:e1 ExpressionsList:e2
{:RESULT = new ExpList(e1,e2);:}
;

Expressions::=
Expressions:expOne MINUS:OP ExpressionsOne:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
Expressions:expOne PLUS:OP ExpressionsOne:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
ExpressionsOne:eo
{:RESULT = eo;:}
;

ExpressionsOne::=
ExpressionsOne:expOne STAR:OP ExpressionsTwo:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
ExpressionsOne:expOne SLASH:OP ExpressionsTwo:expTwo
{:RESULT = new OpExp(expOne.left,expOne.right,OP,expOne,expTwo);:}
|
ExpressionsTwo:et
{:RESULT = et ;:}
;

ExpressionsTwo::=
MINUS INTLIT:expint
{: RESULT = new IntExp(expint.left,expint.right,0 - expint);:}|
INTLIT:expInt
{: RESULT= new IntExp(expInt.left,expInt.right, expInt) ;:}
|
Variable:ExpVar
{: RESULT= new VarExp(ExpVar.left,ExpVar.right,expVar) ;:}
|
LPAREN Expressions:e RPAREN
{:RESULT = e ;:}
;
