/*
 * parser.cup -- SPL parser specification
 */


package parse;

import java_cup.runtime.*;


parser code {:

  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }

:}


terminal ARRAY,IF,ELSE,VAR,WHILE,REF,PROC,OF,TYPE,LE,GE,ASGN,PLUS,MINUS,STAR,SLASH,EQ,NE,LT,GT,RPAREN,LPAREN,RCURL,LCURL,RBRACK,LBRACK,SEMIC,COMMA,COLON;
terminal Integer INTLIT;
terminal String IDENT;


non terminal		MatchSign,Operator,Program,TypV,Prozedur,Typ,Array,Paralist,Deklaration,StmtList,Stmt,Para,LeftHandSide,RightHandSide,Expressions,Ausdruck, IfStmt,WhileStmt,AssignStmt,ProcCall,OptElse,Variable,VariableArray;

start with Program;


Program::=|
      TypV Program
	  {: RESULT = new DecList((dec h)h, (DecList t)dt) ;:}
      |
      Prozedur Program
	  {: RESULT = new DecList((Dec h)h, (DecList t)dt) ;:}
      ;

/*
eventueller Auruf von .newSym() nötig anstatt Sym sn
*/
TypV::=TYPE IDENT:sn EQ Typ:tt SEMIC
{: RESULT = new TypeDec(tleft,tright,(Sym) sn, (Ty)tt ;:}
;

Typ::=
IDENT:id
{: RESULT = id ;:}
|
Array: a
{: RESULT = a ;:}
;


Array::=
ARRAY:a LBRACK INTLIT:count RBRACK OF Array 
{: RESULT = new ArrayTy(aleft, aright, count, (Ty t)t) ;:}
|
ARRAY:a LBRACK INTLIT:count RBRACK OF IDENT:t
{: RESULT = new ArrayTy(aleft, aright, count, (Ty)t) ;:}
;

Prozedur::=
PROC:p IDENT:s LPAREN Paralist RPAREN LCURL Deklaration:p StmtList:b RCURL
{: RESULT = new ProcDec(pleft, pright, (Sym)s, (DecList)p, (StmList)b) ;:};

/*

*/
Deklaration ::= 
{: RESULT =  ;:}
|
VAR IDENT COLON IDENT SEMIC Deklaration
{: RESULT ;:};

Paralist::=
{: RESULT ;:}
|
Para COMMA Paralist 
{: RESULT ;:}
|
Para
{: RESULT ;:};

Para::= IDENT COLON Typ
{: RESULT ;:}
|
REF IDENT COLON Typ
{: RESULT ;:};


/*
TODO: Stmtlist evtl mit boolean? da überprüfung auf empty
*/
StmtList::=
{: RESULT = new StmList() ;:}
|
Stmt StmtList
{: RESULT = new StmList((Stm h)h, (StmList t)t) ;:};


Stmt::=
IfStmt:i
{: RESULT = i; :} 
|
WhileStmt: w
{: RESULT = w; :}
|
AssignStmt: a
{: RESULT = a; :}
|
ProcCall: pc
{: RESULT = pc; :}
|
/*
TODO: EMPTY STATEMENT
*/
SEMIC:s 
{: RESULT = (sleft,sright) ; :}
;

IfStmt::=IF LPAREN Expressions RPAREN Stmt OptElse
{: RESULT = new IfStmt() ;:};

OptElse::=
{: RESULT ;:}
|
ELSE Stmt
{: RESULT ;:}
;

WhileStmt::= 
WHILE LPAREN Ausdruck RPAREN Stmt 
{: RESULT = ;};

AssignStmt::=
  LeftHandSide:l ASGN RightHandSide:r
  {: RESULT = new AssignStmt(lleft,rright, (Var)v, (Exp)e) ;:}
  ;

ProcCall::=
IDENT LPAREN IDENT RPAREN SEMIC
{: RESULT ;:}
;

LeftHandSide::=
{: RESULT ;:}
|
Variable
{: RESULT ;:};

Variable::=IDENT
{: RESULT ;:}
|
VariableArray 
{: RESULT ;:}
;

VariableArray::= VariableArray LBRACK Ausdruck RBRACK
{: RESULT ;:}
|
IDENT LBRACK Ausdruck RBRACK 
{: RESULT ;:}
;

RightHandSide::=Expressions
{: RESULT ;:}
;

/*
TODO: Ausdrücke ersetzen
*/
Ausdruck::=
Variable MatchSign Variable|
INTLIT MatchSign INTLIT|
Variable MatchSign INTLIT|
INTLIT MatchSign Variable;

MatchSign::=
LT|
LE|
GE|
GT|
NE|
EQ;

Expressions::= 
Variable:v {: RESULT = new VarExp(vleft,vright,v); :}| 
Variable Operator INTLIT|
Variable Operator Variable|
INTLIT Operator INTLIT|
Expressions LT Expressions|
Expressions LE Expressions|
Expressions GE Expressions|
Expressions GT Expressions|
Expressions NE Expressions|
Expressions EQ Expressions;


Operator::=
PLUS|
MINUS|
STAR|
SLASH;