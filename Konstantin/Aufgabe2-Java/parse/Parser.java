
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
<<<<<<< HEAD
// Wed May 31 16:14:23 CEST 2017
=======
// Wed May 31 14:05:37 GMT 2017
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import abysn.*;
import sym.*;

/** CUP v0.11a beta 20060608 generated parser.
<<<<<<< HEAD
  * @version Wed May 31 16:14:23 CEST 2017
=======
  * @version Wed May 31 14:05:37 GMT 2017
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\004\000\002\003\007\000\002\010\003" +
    "\000\002\010\003\000\002\011\010\000\002\011\010\000" +
    "\002\004\013\000\002\007\002\000\002\007\010\000\002" +
    "\005\002\000\002\005\003\000\002\006\005\000\002\006" +
    "\003\000\002\014\005\000\002\014\006\000\002\012\002" +
    "\000\002\012\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\015\010\000\002\022\002\000\002\022" +
    "\004\000\002\016\007\000\002\017\005\000\002\021\005" +
    "\000\002\020\006\000\002\023\003\000\002\023\003\000" +
    "\002\024\006\000\002\024\006\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\031\002\000\002\031\004" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
<<<<<<< HEAD
    "\027\005\000\002\027\003\000\002\027\003" });
=======
    "\027\003\000\002\027\003\000\002\027\005" });
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\000\012\006\014\010\001\002\000" +
    "\004\002\171\001\002\000\010\002\000\012\006\014\010" +
    "\001\002\000\004\042\027\001\002\000\010\002\000\012" +
    "\006\014\010\001\002\000\004\042\011\001\002\000\004" +
    "\023\012\001\002\000\006\004\016\042\015\001\002\000" +
    "\004\035\025\001\002\000\010\027\ufffb\035\ufffb\040\ufffb" +
    "\001\002\000\010\027\ufffc\035\ufffc\040\ufffc\001\002\000" +
    "\004\034\017\001\002\000\004\041\020\001\002\000\004" +
    "\033\021\001\002\000\004\013\022\001\002\000\006\004" +
    "\016\042\024\001\002\000\010\027\ufffa\035\ufffa\040\ufffa" +
    "\001\002\000\010\027\ufff9\035\ufff9\040\ufff9\001\002\000" +
    "\010\002\ufffd\012\ufffd\014\ufffd\001\002\000\004\002\uffff" +
    "\001\002\000\004\030\030\001\002\000\010\011\032\027" +
    "\ufff5\042\034\001\002\000\004\027\ufff4\001\002\000\004" +
    "\042\165\001\002\000\004\027\042\001\002\000\004\036" +
    "\040\001\002\000\006\027\ufff2\040\036\001\002\000\006" +
    "\011\032\042\034\001\002\000\004\027\ufff3\001\002\000" +
    "\006\004\016\042\015\001\002\000\006\027\ufff1\040\ufff1" +
    "\001\002\000\004\032\043\001\002\000\020\005\ufff7\007" +
    "\044\010\ufff7\031\ufff7\032\ufff7\035\ufff7\042\ufff7\001\002" +
    "\000\004\042\160\001\002\000\016\005\060\010\046\031" +
    "\uffef\032\057\035\052\042\050\001\002\000\004\030\154" +
    "\001\002\000\004\037\152\001\002\000\010\030\145\034" +
    "\131\037\uffe0\001\002\000\020\005\uffed\006\uffed\010\uffed" +
    "\031\uffed\032\uffed\035\uffed\042\uffed\001\002\000\020\005" +
    "\uffe8\006\uffe8\010\uffe8\031\uffe8\032\uffe8\035\uffe8\042\uffe8" +
    "\001\002\000\004\035\144\001\002\000\004\031\143\001" +
    "\002\000\004\035\141\001\002\000\060\005\uffdf\006\uffdf" +
    "\010\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\136\035\uffdf\037\uffdf\041" +
    "\uffdf\042\uffdf\001\002\000\016\005\060\010\046\031\uffef" +
    "\032\057\035\052\042\050\001\002\000\004\030\065\001" +
    "\002\000\020\005\uffe9\006\uffe9\010\uffe9\031\uffe9\032\uffe9" +
    "\035\uffe9\042\uffe9\001\002\000\016\005\060\010\046\031" +
    "\uffef\032\057\035\052\042\050\001\002\000\020\005\uffec" +
    "\006\uffec\010\uffec\031\uffec\032\uffec\035\uffec\042\uffec\001" +
    "\002\000\004\031\uffee\001\002\000\010\030\075\041\071" +
    "\042\067\001\002\000\054\005\uffcd\006\uffcd\010\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\035\uffcd\041\uffcd\042\uffcd\001\002\000\060" +
    "\005\uffe0\006\uffe0\010\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\131\035" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\001\002\000\054\005\uffcf" +
    "\006\uffcf\010\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\041\uffcf\042" +
<<<<<<< HEAD
    "\uffcf\001\002\000\054\005\uffcc\006\uffcc\010\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\035\uffcc\041\uffcc\042\uffcc\001\002\000\004\027" +
=======
    "\uffcf\001\002\000\054\005\uffce\006\uffce\010\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\035\uffce\041\uffce\042\uffce\001\002\000\004\027" +
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
    "\124\001\002\000\054\005\uffd2\006\uffd2\010\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\103\022\104\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\041\uffd2\042\uffd2\001\002\000\022\015" +
    "\113\016\114\017\100\020\101\023\110\024\115\025\111" +
    "\026\112\001\002\000\010\030\075\041\071\042\067\001" +
    "\002\000\010\017\100\020\101\027\077\001\002\000\054" +
<<<<<<< HEAD
    "\005\uffce\006\uffce\010\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\041" +
    "\uffce\042\uffce\001\002\000\010\030\075\041\071\042\067" +
=======
    "\005\uffcc\006\uffcc\010\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\041" +
    "\uffcc\042\uffcc\001\002\000\010\030\075\041\071\042\067" +
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
    "\001\002\000\010\030\075\041\071\042\067\001\002\000" +
    "\054\005\uffd4\006\uffd4\010\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\103\022\104\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4" +
    "\041\uffd4\042\uffd4\001\002\000\010\030\075\041\071\042" +
    "\067\001\002\000\010\030\075\041\071\042\067\001\002" +
    "\000\054\005\uffd0\006\uffd0\010\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035" +
    "\uffd0\041\uffd0\042\uffd0\001\002\000\054\005\uffd1\006\uffd1" +
    "\010\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\035\uffd1\041\uffd1\042\uffd1\001" +
    "\002\000\054\005\uffd3\006\uffd3\010\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\103\022\104\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\035\uffd3\041\uffd3\042\uffd3\001\002\000\010\030\075\041" +
    "\071\042\067\001\002\000\010\030\075\041\071\042\067" +
    "\001\002\000\010\030\075\041\071\042\067\001\002\000" +
    "\010\030\075\041\071\042\067\001\002\000\010\030\075" +
    "\041\071\042\067\001\002\000\010\030\075\041\071\042" +
    "\067\001\002\000\010\017\100\020\101\027\uffd8\001\002" +
    "\000\010\017\100\020\101\027\uffda\001\002\000\010\017" +
    "\100\020\101\027\uffdb\001\002\000\010\017\100\020\101" +
    "\027\uffd9\001\002\000\010\017\100\020\101\027\uffdc\001" +
    "\002\000\010\017\100\020\101\027\uffd7\001\002\000\014" +
    "\005\060\010\046\032\057\035\052\042\050\001\002\000" +
    "\020\005\uffe6\006\127\010\uffe6\031\uffe6\032\uffe6\035\uffe6" +
    "\042\uffe6\001\002\000\020\005\uffe7\006\uffe7\010\uffe7\031" +
    "\uffe7\032\uffe7\035\uffe7\042\uffe7\001\002\000\014\005\060" +
    "\010\046\032\057\035\052\042\050\001\002\000\020\005" +
    "\uffe5\006\uffe5\010\uffe5\031\uffe5\032\uffe5\035\uffe5\042\uffe5" +
    "\001\002\000\010\030\075\041\071\042\067\001\002\000" +
    "\010\017\100\020\101\033\133\001\002\000\060\005\uffdd" +
    "\006\uffdd\010\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\041\uffdd\042\uffdd\001\002\000\004\031\135\001\002" +
    "\000\020\005\uffe2\006\uffe2\010\uffe2\031\uffe2\032\uffe2\035" +
    "\uffe2\042\uffe2\001\002\000\010\030\075\041\071\042\067" +
    "\001\002\000\010\017\100\020\101\033\140\001\002\000" +
    "\060\005\uffde\006\uffde\010\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\037\uffde\041\uffde\042\uffde\001\002\000\004\042" +
    "\067\001\002\000\020\005\uffeb\006\uffeb\010\uffeb\031\uffeb" +
    "\032\uffeb\035\uffeb\042\uffeb\001\002\000\010\002\ufff8\012" +
    "\ufff8\014\ufff8\001\002\000\020\005\uffea\006\uffea\010\uffea" +
    "\031\uffea\032\uffea\035\uffea\042\uffea\001\002\000\012\027" +
    "\uffd6\030\075\041\071\042\067\001\002\000\004\027\151" +
    "\001\002\000\016\017\100\020\101\027\uffd6\030\075\041" +
    "\071\042\067\001\002\000\004\027\uffd5\001\002\000\004" +
    "\035\uffe1\001\002\000\010\030\075\041\071\042\067\001" +
    "\002\000\024\005\uffe3\006\uffe3\010\uffe3\017\100\020\101" +
    "\031\uffe3\032\uffe3\035\uffe3\042\uffe3\001\002\000\010\030" +
    "\075\041\071\042\067\001\002\000\004\027\156\001\002" +
    "\000\014\005\060\010\046\032\057\035\052\042\050\001" +
    "\002\000\020\005\uffe4\006\uffe4\010\uffe4\031\uffe4\032\uffe4" +
    "\035\uffe4\042\uffe4\001\002\000\004\036\161\001\002\000" +
    "\006\004\016\042\015\001\002\000\004\035\163\001\002" +
    "\000\020\005\ufff7\007\044\010\ufff7\031\ufff7\032\ufff7\035" +
    "\ufff7\042\ufff7\001\002\000\016\005\ufff6\010\ufff6\031\ufff6" +
    "\032\ufff6\035\ufff6\042\ufff6\001\002\000\004\036\166\001" +
    "\002\000\006\004\016\042\015\001\002\000\006\027\ufff0" +
    "\040\ufff0\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\010\002\167\003\006\004\004\001\001" +
    "\000\002\001\001\000\010\002\025\003\006\004\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\012" +
    "\011\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\032\006\030\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\036\014\034\001\001\000\002\001\001\000\006\010\040" +
    "\011\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\044\001\001\000\002\001\001\000\024\012\053" +
    "\013\061\015\050\016\062\017\054\020\052\021\060\023" +
    "\046\024\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\133\013\061\015\050\016\062\017" +
    "\054\020\052\021\060\023\046\024\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\063\013\061\015" +
    "\050\016\062\017\054\020\052\021\060\023\046\024\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\065\024\055\025\073\026\072\027\067\030\071\001\001" +
<<<<<<< HEAD
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\065\024\055\025\075\026\072\027" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\065\024\055\026\106\027\067\001\001\000\012\023" +
    "\065\024\055\026\101\027\067\001\001\000\002\001\001" +
    "\000\010\023\065\024\055\027\105\001\001\000\010\023" +
    "\065\024\055\027\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\065\024\055\025" +
    "\122\026\072\027\067\001\001\000\014\023\065\024\055" +
    "\025\121\026\072\027\067\001\001\000\014\023\065\024" +
    "\055\025\120\026\072\027\067\001\001\000\014\023\065" +
    "\024\055\025\117\026\072\027\067\001\001\000\014\023" +
    "\065\024\055\025\116\026\072\027\067\001\001\000\014" +
    "\023\065\024\055\025\115\026\072\027\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\124\015\050\016\062\017\054\020\052\021\060\023\046" +
    "\024\055\001\001\000\004\022\125\001\001\000\002\001" +
    "\001\000\022\013\127\015\050\016\062\017\054\020\052" +
    "\021\060\023\046\024\055\001\001\000\002\001\001\000" +
    "\014\023\065\024\055\025\131\026\072\027\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
=======
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\065\024\055\025\075\026\072\027" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\065\024\055\026\106\027\067\001\001\000\012\023" +
    "\065\024\055\026\101\027\067\001\001\000\002\001\001" +
    "\000\010\023\065\024\055\027\105\001\001\000\010\023" +
    "\065\024\055\027\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\065\024\055\025" +
    "\122\026\072\027\067\001\001\000\014\023\065\024\055" +
    "\025\121\026\072\027\067\001\001\000\014\023\065\024" +
    "\055\025\120\026\072\027\067\001\001\000\014\023\065" +
    "\024\055\025\117\026\072\027\067\001\001\000\014\023" +
    "\065\024\055\025\116\026\072\027\067\001\001\000\014" +
    "\023\065\024\055\025\115\026\072\027\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\124\015\050\016\062\017\054\020\052\021\060\023\046" +
    "\024\055\001\001\000\004\022\125\001\001\000\002\001" +
    "\001\000\022\013\127\015\050\016\062\017\054\020\052" +
    "\021\060\023\046\024\055\001\001\000\002\001\001\000" +
    "\014\023\065\024\055\025\131\026\072\027\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
    "\002\001\001\000\014\023\065\024\055\025\136\026\072" +
    "\027\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\141\023\046\024\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\065\024" +
    "\055\025\146\026\072\027\067\031\145\001\001\000\002" +
    "\001\001\000\016\023\065\024\055\025\146\026\072\027" +
    "\067\031\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\065\024\055\025\152\026\072\027\067\001" +
    "\001\000\002\001\001\000\016\023\065\024\055\025\073" +
    "\026\072\027\067\030\154\001\001\000\002\001\001\000" +
    "\022\013\156\015\050\016\062\017\054\020\052\021\060" +
    "\023\046\024\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\161\011\013\001\001\000\002\001\001" +
    "\000\004\007\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\166\011\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 53: // ExpressionsTwo ::= INTLIT 
=======
          case 53: // ExpressionsTwo ::= LPAREN Expressions RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressionsTwo ::= Variable 
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
            {
              Exp RESULT =null;
		int expIntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expIntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expInt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IntExp(expInt.left,expInt.right, expInt) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 52: // ExpressionsTwo ::= Variable 
=======
          case 51: // ExpressionsTwo ::= INTLIT 
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
            {
              Exp RESULT =null;
		int expVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new VarExp(expVar.left,expVar.right,expVar) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 51: // ExpressionsTwo ::= LPAREN Expressions RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsTwo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
=======
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
          case 50: // ExpressionsOne ::= ExpressionsTwo 
            {
              Exp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp et = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = et ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsOne",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionsOne ::= ExpressionsOne SLASH ExpressionsTwo 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int DIVleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int DIVright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object DIV = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,DIV,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsOne",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpressionsOne ::= ExpressionsOne STAR ExpressionsTwo 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int MULleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int MULright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object MUL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,MUL,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsOne",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expressions ::= ExpressionsOne 
            {
              Exp RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp eo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = eo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expressions ::= Expressions PLUS ExpressionsOne 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int ADDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ADDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ADD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,ADD,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expressions ::= Expressions MINUS ExpressionsOne 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int SUBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int SUBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object SUB = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,SUB,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpressionsList ::= Expressions ExpressionsList 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList e2 = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpList(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpressionsList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new EmptyStm(left,right) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Condition ::= Expressions EQ Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int EQUleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EQUright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object EQU = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,EQU,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condition ::= Expressions NE Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int NEQleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NEQright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object NEQ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,NEQ,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condition ::= Expressions GT Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int GRTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int GRTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object GRT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,GRT,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Condition ::= Expressions GE Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int GREleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int GREright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object GRE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,GRE,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Condition ::= Expressions LE Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int LSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,LSE,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condition ::= Expressions LT Expressions 
            {
              Exp RESULT =null;
		int expOneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expOneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expOne = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
<<<<<<< HEAD
=======
		int LSTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LSTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
>>>>>>> f7bc81a14bb09a937d71172de772afcd908a3976
		int expTwoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expTworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expTwo = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(expOne.left,expOne.right,LST,expOne,expTwo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VariableArray ::= IDENT LBRACK Expressions RBRACK 
            {
              Var RESULT =null;
		int arrIdentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrIdentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String arrIdent = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp arrID = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(arrIdent.left,arrIdent.right, arrIdent, arrID) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableArray",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VariableArray ::= VariableArray LBRACK Expressions RBRACK 
            {
              Var RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var va = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(va.left,va.right,va,exp) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableArray",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Variable ::= VariableArray 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var va = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = va ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Variable ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVar(id.left,id.right,Sym.newSym(id) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ProcCall ::= IDENT LPAREN ExpressionsList RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList n = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStm(i.left,i.right,Sym.newSym(i),n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CompoundStmt ::= LCURL StmtList RCURL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList s = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CompStm(i.left,i.right,s)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AssignStmt ::= Variable ASGN Expressions 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStmt(o.left,o.right,l,r) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WhileStmt ::= WHILE LPAREN Condition RPAREN Stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm b = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStmt (w.left,w.right,t,b ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OptElse ::= ELSE Stmt 
            {
              Stm RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OptElse ::= 
            {
              Stm RESULT =null;
		 RESULT = new EmptyStm(left,right) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfStmt ::= IF LPAREN Condition RPAREN Stmt OptElse 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm s2 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt (i.left,i.right,t,s1,s2 ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= SEMIC 
            {
              Stm RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EmptyStm (s.left,s.right) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= CompoundStmt 
            {
              Stm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= ProcCall SEMIC 
            {
              Stm RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= AssignStmt SEMIC AssignStmt 
            {
              Stm RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= WhileStmt 
            {
              Stm RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= IfStmt 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StmtList ::= Stmt StmtList 
            {
              StmList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm h = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmList t = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StmtList ::= 
            {
              StmList RESULT =null;
		 RESULT = new StmList() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Para ::= REF IDENT COLON Typ 
            {
              Dec RESULT =null;
		int idtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String idt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty tipe = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(idt.left,idt.right,idt,tipe,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Para",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Para ::= IDENT COLON Typ 
            {
              Dec RESULT =null;
		int idtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String idt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty tipe = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(idt.left,idt.right,idt,tipe,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Para",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Paralist2 ::= Para 
            {
              ExpList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declist(h,new Declist()) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Paralist2 ::= Para COMMA Paralist2 
            {
              ExpList RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dec h = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList t = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declist(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Paralist ::= Paralist2 
            {
              ExpList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList pl = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Paralist ::= 
            {
              ExpList RESULT =null;
		 RESULT = new DecList() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Paralist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Deklaration ::= VAR IDENT COLON Typ SEMIC Deklaration 
            {
              DecList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(new VarDec(n.left,n.right,Sym.newSym(n),t),d) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Deklaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Deklaration ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Deklaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Prozedur ::= PROC IDENT LPAREN Paralist RPAREN LCURL Deklaration StmtList RCURL 
            {
              DecList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpList p = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList b = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcDec(p.left, p.right, Sym.newSym(s),p,d,b) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prozedur",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Array ::= ARRAY LBRACK INTLIT RBRACK OF IDENT 
            {
              ArrayTy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer count = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(a.left, a.right, count,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Array",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Array ::= ARRAY LBRACK INTLIT RBRACK OF Array 
            {
              ArrayTy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer count = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayTy t = (ArrayTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(a.left, a.right, count,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Array",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Typ ::= Array 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayTy a = (ArrayTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Typ",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Typ ::= IDENT 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameTy(id.left,id.right,Sym.newSym(id)) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Typ",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypV ::= TYPE IDENT EQ Typ SEMIC 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty tt = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDec(t.left,t.right,Sym.newSym(sn),tt ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypV",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Prozedur Program 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList t = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList h = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= TypV Program 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList t = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList h = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(h,t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= 
            {
              DecList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

